name: QC, e2e test in staging, and depoly to prod & facets

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run Prettier
        run: npm run prettier

      - name: Run Lint
        run: npm run lint

      - name: Run TypeScript type-check
        run: npm run type-check

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: quality-check
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
      VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build
        run: npx vite build --mode staging

      - name: Deploy to staging and set BASE_URL
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          npm install -g firebase-tools
          firebase use hone-staging-0
          firebase deploy --only hosting:hone --token "$FIREBASE_TOKEN"
          DEPLOY_OUTPUT=$(firebase deploy --only hosting:hone --token "$FIREBASE_TOKEN")
          echo "$DEPLOY_OUTPUT"
          HOSTING_URL=$(echo "$DEPLOY_OUTPUT" | grep -oP "https://[a-zA-Z0-9\-]+\.web\.app")
          if [ -n "$HOSTING_URL" ]; then
            echo "BASE_URL=$HOSTING_URL" >> $GITHUB_ENV
          else
            echo "BASE_URL is empty. Deployment failed." >&2
            exit 1
          fi

      - name: Wait for Firebase deployment to be ready
        run: npx wait-on $BASE_URL
        env:
          BASE_URL: ${{env.BASE_URL}}

      - name: Run Tests
        run: npm test
        env:
          BASE_URL: ${{env.BASE_URL}}

  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
      VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build
        run: npx vite build --mode production

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to production and set BASE_URL
        run: |
          firebase use hone-prod
          firebase deploy --only hosting:hone --token "$FIREBASE_TOKEN"
          DEPLOY_OUTPUT=$(firebase deploy --only hosting:hone --token "$FIREBASE_TOKEN")
          echo "$DEPLOY_OUTPUT"
          HOSTING_URL=$(echo "$DEPLOY_OUTPUT" | grep -oP "https://[a-zA-Z0-9\-]+\.web\.app")
          if [ -n "$HOSTING_URL" ]; then
            echo "BASE_URL=$HOSTING_URL" >> $GITHUB_ENV
          else
            echo "BASE_URL is empty. Deployment failed." >&2
            exit 1
          fi

      - name: Wait for Firebase deployment to be ready
        run: npx wait-on $BASE_URL
        env:
          BASE_URL: ${{env.BASE_URL}}

      - name: Run Tests
        run: npm test
        env:
          BASE_URL: ${{env.BASE_URL}}

      - name: Git tag succeeded deployment
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git tag -f succeeded-deployment 
          git push origin succeeded-deployment --force

  deploy-to-facets:
    runs-on: ubuntu-latest
    needs: deploy-to-prod
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      VITE_IS_FACETS: true
      VITE_FACETS_DATA_URL: ${{ secrets.VITE_FACETS_DATA_URL }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID_FACETS }}
      VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID_FACETS }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID_FACETS }}
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY_FACETS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build
        run: npx vite build --mode facets

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to facets and set BASE_URL
        run: |
          firebase use facets-prod
          firebase deploy --only hosting:facets --token "$FIREBASE_TOKEN"
